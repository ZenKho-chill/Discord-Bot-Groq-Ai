/*
 * T·ªáp n√†y l√† m·ªôt ph·∫ßn c·ªßa Discord Groq Ai Bot.
 *
 * Discord Groq Ai Bot l√† ph·∫ßn m·ªÅm mi·ªÖn ph√≠: b·∫°n c√≥ th·ªÉ ph√¢n ph·ªëi l·∫°i ho·∫∑c s·ª≠a ƒë·ªïi
 * theo c√°c ƒëi·ªÅu kho·∫£n c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë∆∞·ª£c c√¥ng b·ªë b·ªüi
 * T·ªï ch·ª©c Ph·∫ßn m·ªÅm T·ª± do, phi√™n b·∫£n 3 ho·∫∑c (n·∫øu b·∫°n mu·ªën) b·∫•t k·ª≥ phi√™n b·∫£n n√†o sau ƒë√≥.
 *
 * Discord Groq Ai Bot ƒë∆∞·ª£c ph√¢n ph·ªëi v·ªõi hy v·ªçng r·∫±ng n√≥ s·∫Ω h·ªØu √≠ch,
 * nh∆∞ng KH√îNG C√ì B·∫¢O H√ÄNH; th·∫≠m ch√≠ kh√¥ng bao g·ªìm c·∫£ b·∫£o ƒë·∫£m
 * V·ªÄ T√çNH TH∆Ø∆†NG M·∫†I ho·∫∑c PH√ô H·ª¢P CHO M·ªòT M·ª§C ƒê√çCH C·ª§ TH·ªÇ. Xem
 * Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
 *
 * B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n sao c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU c√πng v·ªõi Discord Groq Ai Bot.
 * N·∫øu kh√¥ng, h√£y xem <https://www.gnu.org/licenses/>.
 */

import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';

/**
 * T·∫°o ki·ªÉu embed cho c√¢u tr·∫£ l·ªùi c·ªßa bot
 * @param {string} content - N·ªôi dung c·ªßa embed
 * @param {Object} options - T√πy ch·ªçn b·ªï sung cho embed
 * @returns {EmbedBuilder} - Discord Embed
 */

export function createResponseEmbed(content, options = {}) {
    const embed = new EmbedBuilder()
        .setColor(options.color || '#5865F2')
        .setDescription(content)

    if (options.title) {
        embed.setTitle(options.title);
    }

    if (options.thumbnail) {
        embed.setThumbnail(options.thumbnail);
    }

    if (options.image) {
        embed.setImage(options.image);
    }

    if (options.author) {
        embed.SetAuthor({
            name: options.author.name,
            iconURL: options.author.iconURL,
            url: options.author.url,
        });
    }

    if (options.timestamp) {
        embed.setTimestamp();
    }

    return embed;
}

/**
 * T·∫°o ki·ªÉu embed cho l·ªói
 * @param {string} errorMessage - Th√¥ng b√°o l·ªói
 * @returns {EmbedBuilder} - Discord Embed
 */

export function createErrorEmbed(errorMessage) {
    return new EmbedBuilder()
        .setColor('#ED4245')
        .setTitle('L·ªói')
        .setDescription(errorMessage)
        .setTimestamp();
}

/**
 * T·∫°o ki·ªÉu embed cho loading
 * @returns {EmbedBuilder} - Discord Embed
 */

export function createLoadingEmbed() {
    return new EmbedBuilder()
        .setColor('#5865F2')
}

/**
 * T·∫°o giao di·ªán c√°c n√∫t ch·ª©c nƒÉng
 * @returns {ActionRowBuilder} - Discord Action Row
 */

export function createNavigationButtons() {
    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('prev_page')
                .setLabel('Trang tr∆∞·ªõc')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚¨ÖÔ∏è'),
            new ButtonBuilder()
                .setCustomId('next_page')
                .setLabel('Trang ti·∫øp theo')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚û°Ô∏è'),
            new ButtonBuilder()
                .setCustomId('delete_message')
                .setLabel('X√≥a tin nh·∫Øn')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('üóëÔ∏è'),
        );

        return row;
}

/**
 * T·∫°o giao di·ªán n√∫t ƒë·ªÉ t·∫£i l·∫°i c√¢u tr·∫£ l·ªùi
 * @returns {ActionRowBuilder} - Discord Action Row
 */

export function createActionButtons() {
    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('regenerate')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('üîÑ')
        );

    return row;
}